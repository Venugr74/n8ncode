To convert your Selenium-based Python script into a JMeter performance testing script (JMX format), I'll write a Python script that generates a JMX file. The generated JMX will emulate the web interactions you've defined in your Selenium script. Here is a Python script that does just that:

```python
import xml.etree.ElementTree as ET

def create_jmeter_jmx():
    root = ET.Element('jmeterTestPlan', version="1.2", properties="5.4.1", jmeter="5.4.1")
    
    # JMeter Test Elements
    hash_tree = ET.SubElement(root, 'hashTree')
    
    test_plan = ET.SubElement(hash_tree, 'TestPlan', guiclass="TestPlanGui", testclass="TestPlan", testname="EndToEnd Test Plan", enabled="true")
    ET.SubElement(test_plan, 'stringProp', name="TestPlan.user_defined.TestPlanName").text = ""
    ET.SubElement(test_plan, 'elementProp', name="TestPlan.user_defined").set("otf-definition", "false")
    
    thread_group = ET.SubElement(hash_tree, 'ThreadGroup', guiclass="ThreadGroupGui", testclass="ThreadGroup", testname="Thread Group", enabled="true")
    ET.SubElement(thread_group, 'stringProp', name="ThreadGroup.num_threads").text = "1"
    ET.SubElement(thread_group, 'stringProp', name="ThreadGroup.ramp_time").text = "1"
    ET.SubElement(thread_group, 'stringProp', name="ThreadGroup.sampler_count").text = "1"
    
    # Each HTTP Sampler per interaction
    http_sampler_login = ET.SubElement(thread_group, 'HTTPSamplerProxy', guiclass="HttpTestSampleGui", testclass="HTTPSamplerProxy", testname="Login", enabled="true")
    ET.SubElement(http_sampler_login, 'stringProp', name="HTTPSampler.domain").text = "saucedemo.com"
    ET.SubElement(http_sampler_login, 'stringProp', name="HTTPSampler.path").text = ""
    ET.SubElement(http_sampler_login, 'stringProp', name="HTTPSampler.method").text = "POST"
    
    # Add HTTP Request Body for login
    body_data = ET.SubElement(http_sampler_login, 'stringProp', name="HTTPsampler.body")
    body_data.text = "username=standard&password=secret_sauce"
    
    # Add Wait time/think time
    ET.SubElement(thread_group, 'UniformRandomTimer', guiclass="RandomTimerGui", testclass="UniformRandomTimer", testname="Pause", enabled="true", duration="3000")

    # HTTP Sampler for adding Bike Light
    http_sampler_bike_light = ET.SubElement(thread_group, 'HTTPSamplerProxy', guiclass="HttpTestSampleGui", testclass="HTTPSamplerProxy", testname="Add Bike Light", enabled="true")
    ET.SubElement(http_sampler_bike_light, 'stringProp', name="HTTPSampler.domain").text = "saucedemo.com"
    ET.SubElement(http_sampler_bike_light, 'stringProp', name="HTTPSampler.path").text = "/add-to-cart-sauce-labs-bike-light"
    ET.SubElement(http_sampler_bike_light, 'stringProp', name="HTTPSampler.method").text = "POST"

    # HTTP Sampler for adding Fleece Jacket
    http_sampler_fleece_jacket = ET.SubElement(thread_group, 'HTTPSamplerProxy', guiclass="HttpTestSampleGui", testclass="HTTPSamplerProxy", testname="Add Fleece Jacket", enabled="true")
    ET.SubElement(http_sampler_fleece_jacket, 'stringProp', name="HTTPSampler.domain").text = "saucedemo.com"
    ET.SubElement(http_sampler_fleece_jacket, 'stringProp', name="HTTPSampler.path").text = "/add-to-cart-sauce-labs-bolt-t-shirt"
    ET.SubElement(http_sampler_fleece_jacket, 'stringProp', name="HTTPSampler.method").text = "POST"

    # Continue to compose the JMX based on the rest of your Selenium script ...
    # You would add more HTTP Samplers for cart interactions, checkout, etc. following similar structure.

    # Finalize the XML structure
    tree = ET.ElementTree(root)
    with open("end2end.jmx", "wb") as xml_file:
        tree.write(xml_file, encoding='utf-8', xml_declaration=True)

if __name__ == "__main__":
    create_jmeter_jmx()
```

### Notes:
1. This script creates a basic JMeter SSH Test Plan in JMX format. You need to expand it with additional HTTP samplers for other interactions (like adding products to the cart, checkout, etc.) based on your Selenium script.
2. Each HTTP request simulates a web request to the `saucedemo.com` site, you may need to include additional configurations like parameters, headers, etc. depending on how the server expects requests.
3. The structure here uses an XML tree to generate the JMX file. After running this script, the generated file (`end2end.jmx`) can be opened and executed in JMeter.
4. Make sure to replace paths and parameters as necessary based on your application and testing requirements.